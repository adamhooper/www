#!/usr/bin/env python

"""Generates 3-in-a-row board positions, in integer format.

These are positions which are one piece away from winning.
"""

print """#ifndef THREE_IN_A_ROW_BITSETS_H
#define THREE_IN_A_ROW_BITSETS_H

/* Augomatically generated by gen-three-in-a-row-bitsets.py */

const long three_in_a_row_bitsets[] = {"""

# The magic numbers were derived for gen-winning-bitsets.py and later copied
print "\t/* rows */"
for i in xrange(0, 5):
	for x in xrange(0, 5):
		for y in xrange(x + 1, 5):
			print "\t%d," % \
				((0x1f & ~(0x1 << x) & ~(0x1 << y)) << (5 * i))

print "\t/* columns */"
for i in xrange(0, 5):
	for x in xrange(0, 5):
		for y in xrange(x + 1, 5):
			print "\t%d," % \
				((0x108421 << i)
				 & ~(0x1 << (5 * x + i))
				 & ~(0x1 << (5 * y + i)))

print "\t/* diagonals */"
for x in xrange(0, 5):
	for y in xrange(x + 1, 5):
		print "\t%d," % (0x1041041
				 & ~(0x1 << (6 * x))
				 & ~(0x1 << (6 * y)))
		print "\t%d," % (0x111110
				 & ~(0x1 << (4 * (x + 1)))
				 & ~(0x1 << (4 * (y + 1))))


print """};

const int n_three_in_a_row_bitsets
	= sizeof(three_in_a_row_bitsets) / sizeof(three_in_a_row_bitsets[0]);

#endif /* THREE_IN_A_ROW_BITSETS_H */"""
