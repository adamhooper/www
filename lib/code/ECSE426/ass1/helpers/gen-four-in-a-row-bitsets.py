#!/usr/bin/env python

"""Generates 4-in-a-row board positions, in integer format.

These are positions which are one piece away from winning.
"""

print """#ifndef FOUR_IN_A_ROW_BITSETS_H
#define FOUR_IN_A_ROW_BITSETS_H

/* Augomatically generated by gen-four-in-a-row-bitsets.py */

const long four_in_a_row_bitsets[] = {"""

# The magic numbers were derived for gen-winning-bitsets.py and later copied
print "\t/* rows */"
for i in xrange(0, 5):
	for x in xrange(0, 5):
		print "\t%d," % ((0x1f & ~(0x1 << x)) << (5 * i))

print "\t/* columns */"
for i in xrange(0, 5):
	for x in xrange(0, 5):
		print "\t%d," % ((0x108421 << i) & ~(0x1 << (5 * x + i)))

print "\t/* diagonals */"
for i in xrange(0, 5):
	print "\t%d," % (0x1041041 & ~(0x1 << (6 * i)))
	print "\t%d," % (0x111110 & ~(0x1 << (4 * (i + 1))))


print """};

const int n_four_in_a_row_bitsets
	= sizeof(four_in_a_row_bitsets) / sizeof(four_in_a_row_bitsets[0]);

#endif /* FOUR_IN_A_ROW_BITSETS_H */"""
