> (load "all-procedures.scm")
> (sum-bigger2 1 2 3)
13
> (sum-bigger2 3 1 2)
13
> (sum-bigger2 1 3 2)
13
> (sum-bigger2 2 1 3)
13
> (sum-bigger2 3 2 1)
13
> (survives? 1 9)
#t
> (survives? 2 9)
#f
> (survives? 3 9)
#f
> (survives? 4 9)
#f
> (survives? 5 9)
#f
> (survives? 6 9)
#f
> (survives? 7 9)
#t
> (survives? 8 9)
#f
> (survives? 9 9)
#f
> (next-survivor 1 9)
7
> (next-survivor 2 9)
7
> (next-survivor 3 9)
7
> (next-survivor 4 9)
7
> (next-survivor 5 9)
7
> (next-survivor 6 9)
7
> (next-survivor 7 9)
1
> (next-survivor 8 9)
1
> (next-survivor 9 9)
1
> (survivors 9)
(1 7)
> (survivors 11)
(2 7)
> (survivors 15)
(5 14)
> (accumulate + 1 (lambda (x) x) 1 (lambda (x) (+ x 1)) 2) ; 1 + 2 + 1
4
> (product (lambda (x) (* x x)) 2 (lambda (x) (+ x 2)) 4) ; 4 * 16
64
> (sum (lambda (x) x) 1 (lambda (x) (+ x 1)) 10) ; 10 * 11 / 2
55
> (product (lambda (x) (* x x)) 2 (lambda (x) (+ x 2)) 4) ; 4 * 16
64
> (filtered-accumulate (lambda (x) (= 0 (modulo x 2))) + 0 (lambda (x) x) 1 (lambda (x) (+ 1 x)) 10) ; Sum of even numbers from 1 to 10
30
> (filtered-accumulate (lambda (x) (= 0 (modulo x 3))) * 1 (lambda (x) (* x x)) 1 (lambda (x) (+ 1 x)) 10) ; 3^2 * 6^2 * 9^2
26244
> (prime? 5)
#t
> (prime? 13)
#t
> (prime? 25)
#f
> (prime? 100)
#f
> (prime? 119)
#f
> (prime? 117)
#f
> (prime? 101)
#t
> (sum-primes-squared 3 11) ; 3, 5, 7, 11
204
> (sum-primes-squared 100 120) ; 101, 103, 107, 109, 113
56909
> (product-non-divisible 7) ; 6!
720
> (product-non-divisible 3) ; 2!
2
> (product-non-divisible 5) ; 4!
24
> (product-non-divisible 6) ; 5
5
> (shuffle '(1 2 3))
(1 3 2)
> (shuffle '(a b c d e f g))
(a e b f c g d)
> (shuffle '(a b c d e f g h))
(a e b f c g d h)
> (shuffle '(a b c d e f g))
(a e b f c g d)
> (shuffle (shuffle '(a b c d e f g)))
(a c e g b d f)
> (shuffle (shuffle (shuffle '(a b c d e f g))))
(a b c d e f g)
> (shuffle-number '(a b c d e f g))
3
> (shuffle-number '(a b c d e f g h))
3
> (shuffle-number '(a b c d e f g h i))
6
> (define square (lambda (x) (* x x)))
> (define cube (lambda (x) (* x x x)))
> (apply-all (list list sqrt square cube) 4)
((4) 2 16 64)
> (apply-all (list (lambda (x) 1) (lambda (x) x) list) 6)
(1 6 (6))
> (deep-reverse '((a b) c (d (e f))))
(((f e) d) c (b a))
> (deep-reverse '(a b c d e f g))
(g f e d c b a)
> (deep-reverse '(1 (2 (3 (4 (5 (6 (7)))) 8) 9) 10))
(10 (9 (8 ((((7) 6) 5) 4) 3) 2) 1)
> (deep-reverse '(((a b)) ((c d))))
(((d c)) ((b a)))
